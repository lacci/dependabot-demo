name: Renovatebot

on: workflow_dispatch

env:
  REPORT_DIR: renovatebot-reports
  REPORT_NAME: renovate-report.json

jobs:
  renovatebot:
    runs-on: ubuntu-latest
    permissions:
      security-events: read
    steps:
    - name: Echo api url
      run: echo "${{ github.api_url }}"
    
    - name: Checkout
      uses: actions/checkout@v4.2.2
        
    - name: Determine current user
      id: id
      run: |
        echo "user=$(id -u)" >> $GITHUB_OUTPUT
        echo "group=$(id -g)" >> $GITHUB_OUTPUT

    - name: Generate report folder
      run: |
        mkdir -p /tmp/report
        sudo chown -R ${{ steps.id.outputs.user }} /tmp/report

    - name: Self-hosted Renovate
      uses: renovatebot/github-action@v41.0.21
      with:
        docker-user: "${{ steps.id.outputs.user }}:${{ steps.id.outputs.group }}"
        docker-volumes: /tmp/report:/tmp/report
      env:
        LOG_LEVEL: debug
        RENOVATE_TOKEN: ${{ github.token }}
        RENOVATE_REPOSITORIES: ${{ github.repository }}
        # RENOVATE_DRY_RUN: true
        RENOVATE_REPORT_TYPE: file
        RENOVATE_REPORT_PATH: /tmp/report/renovate-report.json
        HOME: ${{ github.workspace }}
    
    - name: Renovatebot report
      run: |
          cat "/tmp/report/renovate-report.json"

    # Step 3: Run the script to generate and print the markdown summary
    - name: Print Renovate Report Summary
      run: |
        # Print the Markdown table header
        echo "# Renovate Dependency Update Summary"
        echo ""
        echo "| Dependency | Current Version | New Version | Update Type | PR Branch | PR Status | Notes |"
        echo "|:-----------|:-----------------|:------------|:------------|:----------|:----------|:------|"

        # Run jq to process the JSON and print the table rows to the console
        jq -r '
          def existing_prs: (
            .repositories[]?.branches? // []
            | map(select(.upgrades != null))
            | map(.upgrades[])
            | map({
                depName: .depName,
                currentVersion: .currentVersion,
                newVersion: .newVersion,
                prBranch: (.branchName // "-"),
                prStatus: (.result // "done")
              })
          );

          .repositories[]? 
          | .packageFiles? // {}
          | to_entries[]
          | .value[]
          | select(.deps != null)
          | .deps[]
          | select(.updates != null and (.updates | length > 0))
          | .updates[]
          | {
              depName: .depName,
              currentVersion: .currentVersion,
              newVersion: .newVersion,
              updateType: .updateType,
              branchName: .branchName,
              notes: .bucket
            }
          | . as $u
          | (
              existing_prs
              | map(select(.depName == $u.depName and .newVersion == $u.newVersion))
              | .[0] // {prBranch: "-", prStatus: "Missing"}
            ) as $pr
          | "| \($u.depName) | \($u.currentVersion) | \($u.newVersion) | \($u.updateType) | \($pr.prBranch) | \($pr.prStatus) | \($u.notes) |"
        ' /tmp/report/renovate-report.json

        echo ""
      shell: bash





