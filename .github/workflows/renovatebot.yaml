name: Renovatebot

on: workflow_dispatch

env:
  REPORT_DIR: /tmp/report
  REPORT_PATH: /tmp/report/renovate-report.json

jobs:
  renovatebot:
    runs-on: ubuntu-latest
    permissions:
      security-events: read
    steps:
    - name: Echo api url
      run: echo "${{ github.api_url }}"
    
    - name: Checkout
      uses: actions/checkout@v4.2.2
        
    - name: Determine current user
      id: id
      run: |
        echo "user=$(id -u)" >> $GITHUB_OUTPUT
        echo "group=$(id -g)" >> $GITHUB_OUTPUT

    - name: Generate report folder
      run: |
        mkdir -p ${{ env.REPORT_DIR }}
        sudo chown -R ${{ steps.id.outputs.user }} ${{ env.REPORT_DIR }}

    - name: Self-hosted Renovate
      uses: renovatebot/github-action@v41.0.21
      with:
        docker-user: "${{ steps.id.outputs.user }}:${{ steps.id.outputs.group }}"
        docker-volumes: ${{ env.REPORT_DIR }}:${{ env.REPORT_DIR }}
      env:
        RENOVATE_TOKEN: ${{ github.token }}
        RENOVATE_REPOSITORIES: ${{ github.repository }}
        LOG_LEVEL: debug
        # RENOVATE_DRY_RUN: true
        RENOVATE_REPORT_TYPE: file
        RENOVATE_REPORT_PATH: ${{ env.REPORT_PATH }}
        # HOME: ${{ github.workspace }}

    - name: Generate Renovate Report Summary
      run: |
        (
          if jq -e '.repositories[].problems | length == 0' ${{ env.REPORT_PATH }} > /dev/null; then
            # No problems, do nothing
            :
          else
            echo "# Problems"
            echo "| Type | Message | Details  |"; 
            echo "|:-----|:--------|:---------|"; 
            jq -r '
              .repositories[].problems[] |
              "| \(if (.warnings // []) | length > 0 then "⚠️" elif .err then "❌" else "" end) | \(.msg) | \(if (.warnings // []) | length > 0 then (.warnings | join("<br>")) elif .err then .err.message else "" end) |"
            ' ${{ env.REPORT_PATH }}
          fi
          echo ""
        ) >> $GITHUB_STEP_SUMMARY
      
        (
          echo "# Dependencies"
          echo "| Name | Current version | New version | Dependency type |  Registry |"; 
          echo "|:-----|:----------------|:------------|:----------------|:----------|"; 
          jq -r '
            .repositories[]? 
            | .packageFiles? // {}
            | to_entries[]
            | .value[]
            | select(.deps != null)
            | .deps[]
            | . as $dep
            | "| \(.depName ) | \(.currentVersion // "---") | \(reduce .updates[] as $up (null; [., $up.newVersion + " (" + $up.updateType + ")"] | map(select(.!=null)) | join("<br>")) // "---") | \(.depType) | \(.registryUrl // "---") |"
          ' ${{ env.REPORT_PATH }}
          echo ""
        ) >> $GITHUB_STEP_SUMMARY
        
        (
          echo "# Pull requests"
          echo "| PR No | PR Title | Branch Name | Version Update |"; 
          echo "|:------|:---------|:------------|:--------|"; 
          jq -r '
            .repositories[]?.branches? // []
            | map(select(.upgrades != null))
            | .[]
            | "| \(.prNo // "NEW" ) | \(.prTitle) | \(.branchName) | \(reduce .upgrades[] as $up (null; [., $up.depName + " (" + $up.updateType + ": " + $up.currentVersion + " -> " + $up.newVersion + ") in " + $up.packageFile] | map(select(.!=null)) | join("<br>"))) |"
          ' ${{ env.REPORT_PATH }}
        ) >> $GITHUB_STEP_SUMMARY

        (
          echo "# Details"
          echo "<details>"
          echo "<summary>For all details see the Full Renovate Report (JSON)</summary>"
          echo ""
          echo '```json'
          jq . ${{ env.REPORT_PATH }}
          echo ""
          echo '```'
          echo "</details>"
        ) >> $GITHUB_STEP_SUMMARY






